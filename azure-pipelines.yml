trigger:
- master	

pool:
  vmImage: 'windows-latest'	 

variables:	
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'	
  buildConfiguration: 'Release'	 
steps:
- task: NuGetToolInstaller@1	
- task: NuGetCommand@2	
  inputs:	  
    restoreSolution: '$(solution)'	   

- task: DotNetCoreCLI@2
  displayName: Build	  
  inputs:	  
    command: build	  
    projects: '**/*.csproj'	   
    arguments: '--configuration Release' # Update this to match your need	    

# ...	
# do this after other tasks such as building	
- task: DotNetCoreCLI@2	
  inputs:	
    command: test	   
    projects: '**/*Tests/*.csproj'	    
    arguments: '--configuration $(buildConfiguration)'	 

- task: DotNetCoreCLI@2	
  inputs:	 
    command: publish	   
    publishWebProjects: True	    
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'	   
    zipAfterPublish: True

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1	
  inputs:	  
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 	    
    artifactName: 'deeApiArtifact'	   